es_ = es_ %>% subs_names(nome_original = nome_original, nome_novo = nome_novo)
lw_final =   data.frame(estacoes_id = lw_$estacao_nome,       lw_[,-c((ncol(lw_)-1), ncol(lw_))])
ls_final =   data.frame(estacoes_id = lsky_$estacao_nome,     lsky_[,-c( (ncol(lw_)-1), ncol(lw_))])
es_final =   data.frame(estacoes_id = es_$estacao_nome,       es_[,-c( (ncol(lw_)-1), ncol(lw_))])
names(lw_final)[1] = 'estacoes_id'
names(ls_final)[1] = 'estacoes_id'
names(es_final)[1] = 'estacoes_id'
##Rrs calculation
rrs = es_final
rrs[,-c(1:6)] = (lw_final[,-c(1:6)]-ls_final[,-c(1:6)]*0.028)/es_final[-c(1:6)]
resultados = list(lw = lw_final,
ls = ls_final,
es = es_final,
rrs = rrs)
return(resultados)
}
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
radiometric_quantities_extraction_and_rrs_calculation_3_sensors = function(es, lw, lsky, depth_ED) {
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
res = extrai_rrs(lsky = lsky,lw = lw, es = es,ed = es, lu = es, eu = es, dept_ED = depth_ED)
## Verifica as dimensões
dim(res$Lw)
dim(res$Lsky)
dim(res$Es)
#Tem que primeiro normalizar os dados para 400-900 e calcular a média entre medidas no mesmo tempo. Isso ocorre
#Caso haja problemas no calculo dos SEGUNDOS dentro do MDB. Daí, tem que calcular a média por ponto no minuto.
lw_norm   =   normaliza(data = res$Lw) #%>% group_radiometry()
lsky_norm =   normaliza(data = res$Lsky) #%>% group_radiometry()
es_norm   =   normaliza(data = res$Es) #%>% group_radiometry()
##Depois de normalizar tenho que deixar os dados iguais (MESMO datetime)
multiFull <- merge(merge(
lw_norm,
lsky_norm, by = "DateTime"),
es_norm,by = "DateTime")
#Separado o dado merged de novo para o formato padrão. agora, todos tem as mesmas colunas e linhas.
lw_final   = multiFull[,1:ncol(lw_norm)]
lsky_final = multiFull[,(ncol(lw_norm)+1):(ncol(lw_norm)*2-1)]
es_final   = multiFull[,(ncol(lw_norm)*2):(ncol(lw_norm)*3-2)]
dim(lw_final)
dim(lsky_final)
dim(es_final)
lw_ =   data.frame(lw_final$Comment.x,     lw_final$CommentSub1.x, lw_final$CommentSub2.x,    lw_final$DateTime, lw_final$IDDevice.x, lw_final[,-c(1:5)])
lsky_ = data.frame(lsky_final$Comment.y, lsky_final$CommentSub1.y, lsky_final$CommentSub2.y,  lw_final$DateTime, lsky_final$IDDevice.y, lsky_final[,-c(1:4)])
es_ =   data.frame(es_final$Comment,     es_final$CommentSub1, es_final$CommentSub2,    lw_final$DateTime, es_final$IDDevice, es_final[,-c(1:4)])
dim(lw_)
dim(lsky_)
dim(es_)
names(lw_) = names(es_norm)
names(lsky_) = names(es_norm)
names(es_) = names(es_norm)
nome_original = unique(lw_$CommentSub1)
print(nome_original)
nome_novo = as.character(strsplit(x = readline("Entre com o nome dos pontos"), split = ',')[[1]])
subs_names = function(df, nome_original, nome_novo) {
df$estacao_nome = df$CommentSub1
for(i in 1:length(nome_original)) {
df$estacao_nome = gsub(df$estacao_nome,replacement = nome_novo[i], pattern = nome_original[i])
print(paste("Alterando nome",nome_novo[i]))
}
return(df)
}
lw_ = lw_ %>% subs_names(nome_original = nome_original, nome_novo = nome_novo)
lsky_ = lsky_ %>% subs_names(nome_original = nome_original, nome_novo = nome_novo)
es_ = es_ %>% subs_names(nome_original = nome_original, nome_novo = nome_novo)
lw_final =   data.frame(estacoes_id = lw_$estacao_nome,       lw_[,-c((ncol(lw_)-1), ncol(lw_))])
ls_final =   data.frame(estacoes_id = lsky_$estacao_nome,     lsky_[,-c( (ncol(lw_)-1), ncol(lw_))])
es_final =   data.frame(estacoes_id = es_$estacao_nome,       es_[,-c( (ncol(lw_)-1), ncol(lw_))])
names(lw_final)[1] = 'estacoes_id'
names(ls_final)[1] = 'estacoes_id'
names(es_final)[1] = 'estacoes_id'
##Rrs calculation
rrs = es_final
rrs[,-c(1:6)] = (lw_final[,-c(1:6)]-ls_final[,-c(1:6)]*0.028)/es_final[-c(1:6)]
resultados = list(lw = lw_final,
ls = ls_final,
es = es_final,
rrs = rrs)
return(resultados)
}
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
0
a
rrs_filtrada
rrs_filtrada$rrs_mediana
par(mfrow=c(2,2))
pontos = unique(rrs_filtrada$rrs_filtrada$estacoes_id)
for(i in 1:length(unique(rrs_filtrada$rrs_filtrada$estacoes_id))) {
#rrs_filtro2 = rrs_filtrada$rrs_filtrada  %>% filter(estacoes_id == pontos[[i]])
rrs_filtro2 = resultados$rrs  %>% filter(estacoes_id == pontos[[i]])
rrs_mediana = rrs_filtrada$rrs_mediana %>% filter(estacoes_id == pontos[[i]])
matplot(t(rrs_filtro2[,-c(1:6)]),
type = 'l', ylim = c(0,0.04), cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
par(new=T)
matplot(t(rrs_mediana[,-1]), x = c(400:899), type = 'l', lwd = 3, col = 'red', ylim = c(0,0.04))
}
pontos
resultados$rrs$Comment
resultados$rrs$CommentSub1
radiometric_quantities_extraction_and_rrs_calculation_3_sensors = function(es, lw, lsky, depth_ED) {
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
res = extrai_rrs(lsky = lsky,lw = lw, es = es,ed = es, lu = es, eu = es, dept_ED = depth_ED)
## Verifica as dimensões
dim(res$Lw)
dim(res$Lsky)
dim(res$Es)
#Tem que primeiro normalizar os dados para 400-900 e calcular a média entre medidas no mesmo tempo. Isso ocorre
#Caso haja problemas no calculo dos SEGUNDOS dentro do MDB. Daí, tem que calcular a média por ponto no minuto.
lw_norm   =   normaliza(data = res$Lw) #%>% group_radiometry()
lsky_norm =   normaliza(data = res$Lsky) #%>% group_radiometry()
es_norm   =   normaliza(data = res$Es) #%>% group_radiometry()
##Depois de normalizar tenho que deixar os dados iguais (MESMO datetime)
multiFull <- merge(merge(
lw_norm,
lsky_norm, by = "DateTime"),
es_norm,by = "DateTime")
#Separado o dado merged de novo para o formato padrão. agora, todos tem as mesmas colunas e linhas.
lw_final   = multiFull[,1:ncol(lw_norm)]
lsky_final = multiFull[,(ncol(lw_norm)+1):(ncol(lw_norm)*2-1)]
es_final   = multiFull[,(ncol(lw_norm)*2):(ncol(lw_norm)*3-2)]
dim(lw_final)
dim(lsky_final)
dim(es_final)
lw_ =   data.frame(lw_final$Comment.x,     lw_final$CommentSub1.x, lw_final$CommentSub2.x,    lw_final$DateTime, lw_final$IDDevice.x, lw_final[,-c(1:5)])
lsky_ = data.frame(lsky_final$Comment.y, lsky_final$CommentSub1.y, lsky_final$CommentSub2.y,  lw_final$DateTime, lsky_final$IDDevice.y, lsky_final[,-c(1:4)])
es_ =   data.frame(es_final$Comment,     es_final$CommentSub1, es_final$CommentSub2,    lw_final$DateTime, es_final$IDDevice, es_final[,-c(1:4)])
dim(lw_)
dim(lsky_)
dim(es_)
names(lw_) = names(es_norm)
names(lsky_) = names(es_norm)
names(es_) = names(es_norm)
nome_original = unique(lw_$CommentSub1)
print(nome_original)
nome_novo = as.character(strsplit(x = readline("Entre com o nome dos pontos"), split = ',')[[1]])
subs_names = function(df, nome_original, nome_novo) {
df$estacao_nome = df$CommentSub1
for(i in 1:length(nome_original)) {
df$estacao_nome = gsub(df$estacao_nome, replacement = nome_novo[i], pattern =  paste('^', nome_original[i], '$', sep  = ''))
print(paste("Alterando nome",nome_novo[i]))
}
return(df)
}
lw_ = lw_ %>% subs_names(nome_original = nome_original, nome_novo = nome_novo)
lsky_ = lsky_ %>% subs_names(nome_original = nome_original, nome_novo = nome_novo)
es_ = es_ %>% subs_names(nome_original = nome_original, nome_novo = nome_novo)
lw_final =   data.frame(estacoes_id = lw_$estacao_nome,       lw_[,-c((ncol(lw_)-1), ncol(lw_))])
ls_final =   data.frame(estacoes_id = lsky_$estacao_nome,     lsky_[,-c( (ncol(lw_)-1), ncol(lw_))])
es_final =   data.frame(estacoes_id = es_$estacao_nome,       es_[,-c( (ncol(lw_)-1), ncol(lw_))])
names(lw_final)[1] = 'estacoes_id'
names(ls_final)[1] = 'estacoes_id'
names(es_final)[1] = 'estacoes_id'
##Rrs calculation
rrs = es_final
rrs[,-c(1:6)] = (lw_final[,-c(1:6)]-ls_final[,-c(1:6)]*0.028)/es_final[-c(1:6)]
resultados = list(lw = lw_final,
ls = ls_final,
es = es_final,
rrs = rrs)
return(resultados)
}
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
##Required packages
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
source('R/normaliza.R')
source("R/radiometric_quantities_extraction_and_rrs_calculation.R")
source("R/radiometric_quantities_extraction_and_rrs_calculation_3_sensors.R")
source("R/rrs_filtering.R")
source("R/posicoes.R")
source("R/read_trios_data.R")
dir_padrao = getwd()
dir_salvamento = "E:/OneDrive/OneDrive - inpe.br/Doutorado/Banco de dados/adiciona_dados/Organizacao/Adicionando ao Banco - TEMP/Billings_08_2021_CETESB"
es =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8424")
lw =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_83AD")
lsky = read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_839B")
eu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8404")
ed =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_83FD")
lu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8404")
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
par(mfrow=c(2,2))
pontos = unique(rrs_filtrada$rrs_filtrada$estacoes_id)
for(i in 1:length(unique(rrs_filtrada$rrs_filtrada$estacoes_id))) {
#rrs_filtro2 = rrs_filtrada$rrs_filtrada  %>% filter(estacoes_id == pontos[[i]])
rrs_filtro2 = resultados$rrs  %>% filter(estacoes_id == pontos[[i]])
rrs_mediana = rrs_filtrada$rrs_mediana %>% filter(estacoes_id == pontos[[i]])
matplot(t(rrs_filtro2[,-c(1:6)]),
type = 'l', ylim = c(0,0.04), cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
par(new=T)
matplot(t(rrs_mediana[,-1]), x = c(400:899), type = 'l', lwd = 3, col = 'red', ylim = c(0,0.04))
}
pontos
(rrs_filtrada$rrs_filtrada$estacoes_id
)
rrs_filtrada$rrs_mediana$estacoes_id
resultados$lw$CommentSub1
##Required packages
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
source('R/normaliza.R')
source("R/radiometric_quantities_extraction_and_rrs_calculation.R")
source("R/radiometric_quantities_extraction_and_rrs_calculation_3_sensors.R")
source("R/rrs_filtering.R")
source("R/posicoes.R")
source("R/read_trios_data.R")
dir_padrao = getwd()
dir_salvamento = "E:/OneDrive/OneDrive - inpe.br/Doutorado/Banco de dados/adiciona_dados/Organizacao/Adicionando ao Banco - TEMP/Billings_08_2021_CETESB"
es =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8424")
lw =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_83AD")
lsky = read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_839B")
eu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8404")
ed =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_83FD")
lu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8404")
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
resultados$rrs$estacoes_id
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
rrs_filtrada$rrs_filtrada$estacoes_id
rrs_filtrada$rrs_mediana$estacoes_id
rrs_filtrada$
rrs_filtrada$rrs_mediana
rrs_filtrada$rrs_sd
rrs_filtrada = rrs_filtering(rrs = resultados$rrs)
rrs_filtrada = rrs_filtering(rrs = resultados$rrs)
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
0
##Required packages
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
source('R/normaliza.R')
source("R/radiometric_quantities_extraction_and_rrs_calculation.R")
source("R/radiometric_quantities_extraction_and_rrs_calculation_3_sensors.R")
source("R/rrs_filtering.R")
source("R/posicoes.R")
source("R/read_trios_data.R")
dir_padrao = getwd()
dir_salvamento = "E:/OneDrive/OneDrive - inpe.br/Doutorado/Banco de dados/adiciona_dados/Organizacao/Adicionando ao Banco - TEMP/Billings_08_2021_CETESB"
es =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8424")
lw =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_83AD")
lsky = read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_839B")
eu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8404")
ed =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_83FD")
lu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8404")
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
rrs = filter(resultados$rrs, estacoes_id != "zero")
require(ggplot2)
rrs_filtered = rrs[0,]
pontos = unique(rrs$estacoes_id)
for(i in 1:length(pontos)) {
teste = 'errado'
rrs_filtro2 = rrs %>% filter(estacoes_id == pontos[[i]])
if(nrow(rrs_filtro2) > 10) {
quantis = quantile(rrs_filtro2$X550)
rrs_filtro2 = filter(rrs_filtro2, X550 < 1 & X899 < 1 & X400 < 1)
rrs_filtro2 = filter(rrs_filtro2, X550 < quantis[4])
rrs_filtro2 = filter(rrs_filtro2, X550 > quantis[2])
}
while(teste == 'errado') {
matplot(t(rrs_filtro2[,-c(1:6)]),
type = 'l', cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
text(x = 600, y = rrs_filtro2$X600, labels=c(1:nrow(rrs_filtro2)), cex= 1, pos = 3)
excluir = as.numeric(strsplit(x = readline("Entre com os pontos para excluir"), split = ',')[[1]])
matplot(t(rrs_filtro2[-excluir,-c(1:6)]),
type = 'l', cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
rrs_filtro2 = rrs_filtro2[-excluir,]
teste = as.character(readline("Está ok?"))
}
if(exists('rrs_filtrada') == FALSE) {rrs_filtrada = rrs_filtro2}
else {rrs_filtrada = rbind(rrs_filtrada, rrs_filtro2) }
print(i)
}
rrs.median = rrs_filtrada[,-c(2:6)] %>% group_by(estacoes_id) %>% summarise_each(fun = median)
rrs.sd = rrs_filtrada[,-c(2:6)] %>% group_by(estacoes_id) %>% summarise_each(fun = sd)
rrs.median$estacoes_id
rrs.median
rrs_filtro2
pontos
rrs_filtro2 = rrs %>% filter(estacoes_id == pontos[[i]])
rrs_filtro2
rrs_filtrada
rrs_filtro2
rm(rrs_filtrada)
if(exists('rrs_filtrada') == FALSE) {rrs_filtrada = rrs_filtro2}
rrs_filtrada
rbind(rrs_filtrada, rrs_filtro2)
rrs_filtrada
rm(rrs_filtrada)
rrs_filtro2 = rrs %>% filter(estacoes_id == pontos[[i]])
if(nrow(rrs_filtro2) > 10) {
quantis = quantile(rrs_filtro2$X550)
rrs_filtro2 = filter(rrs_filtro2, X550 < 1 & X899 < 1 & X400 < 1)
rrs_filtro2 = filter(rrs_filtro2, X550 < quantis[4])
rrs_filtro2 = filter(rrs_filtro2, X550 > quantis[2])
}
for(i in 1:length(pontos)) {
teste = 'errado'
rrs_filtro2 = rrs %>% filter(estacoes_id == pontos[[i]])
if(nrow(rrs_filtro2) > 10) {
quantis = quantile(rrs_filtro2$X550)
rrs_filtro2 = filter(rrs_filtro2, X550 < 1 & X899 < 1 & X400 < 1)
rrs_filtro2 = filter(rrs_filtro2, X550 < quantis[4])
rrs_filtro2 = filter(rrs_filtro2, X550 > quantis[2])
}
while(teste == 'errado') {
matplot(t(rrs_filtro2[,-c(1:6)]),
type = 'l', cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
text(x = 600, y = rrs_filtro2$X600, labels=c(1:nrow(rrs_filtro2)), cex= 1, pos = 3)
excluir = as.numeric(strsplit(x = readline("Entre com os pontos para excluir"), split = ',')[[1]])
matplot(t(rrs_filtro2[-excluir,-c(1:6)]),
type = 'l', cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
rrs_filtro2 = rrs_filtro2[-excluir,]
teste = as.character(readline("Está ok?"))
}
if(exists('rrs_filtrada') == FALSE) {rrs_filtrada = rrs_filtro2}
else {rrs_filtrada = rbind(rrs_filtrada, rrs_filtro2)}
print(i)
}
rrs_filtrada
rrs_filtro2
i
i=1
teste = 'errado'
rrs_filtro2 = rrs %>% filter(estacoes_id == pontos[[i]])
if(nrow(rrs_filtro2) > 10) {
quantis = quantile(rrs_filtro2$X550)
rrs_filtro2 = filter(rrs_filtro2, X550 < 1 & X899 < 1 & X400 < 1)
rrs_filtro2 = filter(rrs_filtro2, X550 < quantis[4])
rrs_filtro2 = filter(rrs_filtro2, X550 > quantis[2])
}
while(teste == 'errado') {
matplot(t(rrs_filtro2[,-c(1:6)]),
type = 'l', cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
text(x = 600, y = rrs_filtro2$X600, labels=c(1:nrow(rrs_filtro2)), cex= 1, pos = 3)
excluir = as.numeric(strsplit(x = readline("Entre com os pontos para excluir"), split = ',')[[1]])
matplot(t(rrs_filtro2[-excluir,-c(1:6)]),
type = 'l', cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
rrs_filtro2 = rrs_filtro2[-excluir,]
teste = as.character(readline("Está ok?"))
}
rrs_filtro2
rrs_filtro2
rrs_filtro2[-0]
rrs_filtro2[-]
rrs_filtro2[,]
##Required packages
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
source('R/normaliza.R')
source("R/radiometric_quantities_extraction_and_rrs_calculation.R")
source("R/radiometric_quantities_extraction_and_rrs_calculation_3_sensors.R")
source("R/rrs_filtering.R")
source("R/posicoes.R")
source("R/read_trios_data.R")
dir_padrao = getwd()
dir_salvamento = "E:/OneDrive/OneDrive - inpe.br/Doutorado/Banco de dados/adiciona_dados/Organizacao/Adicionando ao Banco - TEMP/Billings_08_2021_CETESB"
es =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8424")
lw =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_83AD")
lsky = read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_839B")
eu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8404")
ed =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_83FD")
lu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_08_2021_CETESB/bruto//trios/SAM_8404")
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
dir_salvamento = "E:/OneDrive/OneDrive - inpe.br/Doutorado/Banco de dados/adiciona_dados/Organizacao/Adicionando ao Banco - TEMP/Billings_08_2021_CETESB"
write.csv(data.frame(id = 1, resultados$rrs), paste(dir_salvamento, "/rrs_completa.csv", sep = ''), row.names = F)
write.csv(resultados$lw,                                 paste(dir_salvamento, "/lw_final.csv", sep = ''))
write.csv(resultados$ls,                                 paste(dir_salvamento, "/ls_final.csv", sep = ''))
write.csv(resultados$es,                                 paste(dir_salvamento, "/es_final.csv", sep = ''))
write.csv(resultados$ed,                                 paste(dir_salvamento, "/ed_final.csv", sep = ''))
write.csv(resultados$eu,                                 paste(dir_salvamento, "/eu_final.csv", sep = ''))
write.csv(resultados$lu,                                 paste(dir_salvamento, "/lu_final.csv", sep = ''))
write.csv(rrs_filtrada$rrs_mediana,                      paste(dir_salvamento, "/rrs_mediana.csv", sep = ''))
dir_salvamento = "E:/OneDrive/OneDrive - inpe.br/Doutorado/Banco de dados/adiciona_dados/Organizacao/Adicionando ao Banco - TEMP/Billings_09_2021"
es =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_09_2021/bruto/trios/SAM_8424")
lw =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_09_2021/bruto/trios/SAM_83AD")
lsky = read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_09_2021/bruto/trios/SAM_839B")
eu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_09_2021/bruto/trios/SAM_8404")
ed =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_09_2021/bruto/trios/SAM_83FD")
lu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_09_2021/bruto/trios/SAM_8404")
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
##Required packages
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
source('R/normaliza.R')
source("R/radiometric_quantities_extraction_and_rrs_calculation.R")
source("R/radiometric_quantities_extraction_and_rrs_calculation_3_sensors.R")
source("R/rrs_filtering.R")
source("R/posicoes.R")
source("R/read_trios_data.R")
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
i
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
par(mfrow=c(2,2))
pontos = unique(rrs_filtrada$rrs_filtrada$estacoes_id)
for(i in 1:length(unique(rrs_filtrada$rrs_filtrada$estacoes_id))) {
#rrs_filtro2 = rrs_filtrada$rrs_filtrada  %>% filter(estacoes_id == pontos[[i]])
rrs_filtro2 = resultados$rrs  %>% filter(estacoes_id == pontos[[i]])
rrs_mediana = rrs_filtrada$rrs_mediana %>% filter(estacoes_id == pontos[[i]])
matplot(t(rrs_filtro2[,-c(1:6)]),
type = 'l', ylim = c(0,0.04), cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
par(new=T)
matplot(t(rrs_mediana[,-1]), x = c(400:899), type = 'l', lwd = 3, col = 'red', ylim = c(0,0.04))
}
write.csv(data.frame(id = 1, resultados$rrs), paste(dir_salvamento, "/rrs_completa.csv", sep = ''), row.names = F)
write.csv(resultados$lw,                                 paste(dir_salvamento, "/lw_final.csv", sep = ''))
write.csv(resultados$ls,                                 paste(dir_salvamento, "/ls_final.csv", sep = ''))
write.csv(resultados$es,                                 paste(dir_salvamento, "/es_final.csv", sep = ''))
write.csv(resultados$ed,                                 paste(dir_salvamento, "/ed_final.csv", sep = ''))
write.csv(resultados$eu,                                 paste(dir_salvamento, "/eu_final.csv", sep = ''))
write.csv(resultados$lu,                                 paste(dir_salvamento, "/lu_final.csv", sep = ''))
write.csv(rrs_filtrada$rrs_mediana,                      paste(dir_salvamento, "/rrs_mediana.csv", sep = ''))
dir_salvamento = "E:/OneDrive/OneDrive - inpe.br/Doutorado/Banco de dados/adiciona_dados/Organizacao/Adicionando ao Banco - TEMP/Billings_11_2021"
##Required packages
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
source('R/normaliza.R')
source("R/radiometric_quantities_extraction_and_rrs_calculation.R")
source("R/radiometric_quantities_extraction_and_rrs_calculation_3_sensors.R")
source("R/rrs_filtering.R")
source("R/posicoes.R")
source("R/read_trios_data.R")
##Required packages
require(data.table)
require(dplyr)
require(tidyr)
require(triosRead)
source('R/normaliza.R')
source("R/radiometric_quantities_extraction_and_rrs_calculation.R")
source("R/radiometric_quantities_extraction_and_rrs_calculation_3_sensors.R")
source("R/rrs_filtering.R")
source("R/posicoes.R")
source("R/read_trios_data.R")
dir_padrao = getwd()
dir_salvamento = "E:/OneDrive/OneDrive - inpe.br/Doutorado/Banco de dados/adiciona_dados/Organizacao/Adicionando ao Banco - TEMP/Billings_11_2021"
es =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/bruto/trios/SAM_8424")
lw =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/bruto/trios/SAM_83AD")
lsky = read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/bruto/trios/SAM_839B")
eu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/bruto/trios/SAM_8404")
ed =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/bruto/trios/SAM_83FD")
lu =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/bruto/trios/SAM_8404")
es =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/dados brutos/trios/SAM_8424")
es =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/dados brutos/Dados TRIOS//SAM_8424")
lw =   read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/dados brutos/Dados TRIOS//SAM_83AD")
lsky = read.delim("G:/Drives compartilhados/Reuniões labISA/Campanhas/BILLINGS_11_2021/dados brutos/Dados TRIOS//SAM_839B")
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
resultados = radiometric_quantities_extraction_and_rrs_calculation_3_sensors(es = es, lw = lw, lsky = lsky,depth_ED = F)
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
rrs_filtrada = rrs_filtering(rrs = filter(resultados$rrs, estacoes_id != "zero"))
par(mfrow=c(2,2))
pontos = unique(rrs_filtrada$rrs_filtrada$estacoes_id)
for(i in 1:length(unique(rrs_filtrada$rrs_filtrada$estacoes_id))) {
#rrs_filtro2 = rrs_filtrada$rrs_filtrada  %>% filter(estacoes_id == pontos[[i]])
rrs_filtro2 = resultados$rrs  %>% filter(estacoes_id == pontos[[i]])
rrs_mediana = rrs_filtrada$rrs_mediana %>% filter(estacoes_id == pontos[[i]])
matplot(t(rrs_filtro2[,-c(1:6)]),
type = 'l', ylim = c(0,0.04), cex.lab = 2, cex.axis = 3,
main = rrs_filtro2$estacoes_id[1],
cex.main = 5, col = 'black', x = c(400:899), xlab = "Wavelength")
par(new=T)
matplot(t(rrs_mediana[,-1]), x = c(400:899), type = 'l', lwd = 3, col = 'red', ylim = c(0,0.04))
}
write.csv(data.frame(id = 1, resultados$rrs), paste(dir_salvamento, "/rrs_completa.csv", sep = ''), row.names = F)
write.csv(resultados$lw,                                 paste(dir_salvamento, "/lw_final.csv", sep = ''))
write.csv(resultados$ls,                                 paste(dir_salvamento, "/ls_final.csv", sep = ''))
write.csv(resultados$es,                                 paste(dir_salvamento, "/es_final.csv", sep = ''))
write.csv(resultados$ed,                                 paste(dir_salvamento, "/ed_final.csv", sep = ''))
write.csv(resultados$eu,                                 paste(dir_salvamento, "/eu_final.csv", sep = ''))
write.csv(resultados$lu,                                 paste(dir_salvamento, "/lu_final.csv", sep = ''))
write.csv(rrs_filtrada$rrs_mediana,                      paste(dir_salvamento, "/rrs_mediana.csv", sep = ''))
